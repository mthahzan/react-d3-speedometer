{"version":3,"file":"main.4ce92f5549d447a2e647.bundle.js","sources":["webpack:///./src/index.js"],"sourcesContent":["import React, { PureComponent } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { format as d3Format, select as d3Select } from \"d3\"\nimport { getConfig, DEFAULT_PROPS, updateConfig } from \"./core/config\"\nimport { render, update } from \"./core/render\"\n\nclass ReactSpeedometer extends PureComponent {\n  static displayName = \"ReactSpeedometer\"\n\n  constructor(props) {\n    super(props)\n\n    // list of d3 refs to share within the components\n    this.d3_refs = {\n      pointer: false,\n      current_value_text: false,\n    }\n  }\n\n  componentDidMount() {\n    // render the gauge here\n    this.renderGauge()\n  }\n\n  render = () => {\n    return <div ref={(ref) => (this.gaugeDiv = ref)} />\n  }\n\n  componentDidUpdate() {\n    // on update, check if 'forceRender' option is present;\n    if (this.props.forceRender) {\n      this.renderGauge()\n    } else {\n      // let us just animate the value of the speedometer\n      this.updateReadings()\n    }\n  }\n\n  renderGauge() {\n    this.config = getConfig({\n      PROPS: this.props,\n      parentWidth: this.gaugeDiv.parentNode.clientWidth,\n      parentHeight: this.gaugeDiv.parentNode.clientHeight,\n    })\n\n    // remove existing gauge (if any)\n    d3Select(this.gaugeDiv)\n      .select(\"svg\")\n      .remove()\n\n    this.d3_refs = render({\n      container: this.gaugeDiv,\n      config: this.config,\n    })\n\n    update({\n      d3_refs: this.d3_refs,\n      newValue: this.props.value,\n      config: this.config,\n    })\n  }\n\n  updateReadings() {\n    this.config = updateConfig(this.config, {\n      labelFormat: d3Format(this.props.valueFormat || \"\"),\n      currentValueText: this.props.currentValueText || \"${value}\",\n    })\n\n    // updates the readings of the gauge with the current prop value\n    // animates between old prop value and current prop value\n    update({\n      d3_refs: this.d3_refs,\n      newValue: this.props.value || 0,\n      config: this.config,\n    })\n  }\n}\n\n// define the proptypes\n// make all the props and 'required' and provide sensible default in the 'defaultProps'\nReactSpeedometer.propTypes = {\n  value: PropTypes.number.isRequired,\n  minValue: PropTypes.number.isRequired,\n  maxValue: PropTypes.number.isRequired,\n\n  // tracks if the component should update as the whole or just animate the value\n  // default will just animate the value after initialization/mounting\n  forceRender: PropTypes.bool.isRequired,\n\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  dimensionUnit: PropTypes.string.isRequired, // width/height dimension ... default \"px\"\n  fluidWidth: PropTypes.bool.isRequired,\n\n  // segments to show in the speedometer\n  segments: PropTypes.number.isRequired,\n  // maximum number of labels to be shown\n  maxSegmentLabels: PropTypes.number,\n  // custom segment points to create unequal segments\n  customSegmentStops: PropTypes.array,\n\n  // color strings\n  needleColor: PropTypes.string.isRequired,\n  startColor: PropTypes.string.isRequired,\n  endColor: PropTypes.string.isRequired,\n  // custom segment colors\n  segmentColors: PropTypes.array.isRequired,\n\n  // needle transition type and duration\n  needleTransition: PropTypes.string.isRequired,\n  needleTransitionDuration: PropTypes.number.isRequired,\n  needleHeightRatio: PropTypes.number.isRequired,\n\n  ringWidth: PropTypes.number.isRequired,\n  textColor: PropTypes.string.isRequired,\n\n  // d3 format identifier is generally a string; default \"\" (empty string)\n  valueFormat: PropTypes.string.isRequired,\n  // value text format\n  currentValueText: PropTypes.string.isRequired,\n  // placeholder style for current value\n  currentValuePlaceholderStyle: PropTypes.string.isRequired,\n\n  // font sizes\n  labelFontSize: PropTypes.string.isRequired,\n  valueTextFontSize: PropTypes.string.isRequired,\n}\n\n// define the default proptypes\nReactSpeedometer.defaultProps = DEFAULT_PROPS\n\nexport default ReactSpeedometer\n"],"mappings":"AAMA","sourceRoot":""}